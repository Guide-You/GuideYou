<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guideyou.repository.interfaces.ProductRepository">

	<insert id="insert" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into product(user_id, city_code_id, title, price, content)
		values (#{userId}, #{cityCodeId}, #{title}, #{price}, #{content})
	</insert>
	
	<update id="updateById">
		update product set city_code_id = #{cityCodeId}, title = #{title},
		price = #{price}, content = #{content} where id = #{id}
	</update>
	
	<update id="updateBySoldCount">
		update product set sold_count = sold_count + 1  where id = #{id}
	</update>
	
	<update id="updateByWishCount">
		update product set wish_count = wish_count + 1 #{wishCount} where id = #{id}
	</update>
	
	<update id="updateByViewCount">
		update product set view_count = view_count + 1 #{viewCount} where id = #{id}
	</update>


	<delete id="deletById">
		delete from product where id = #{id }
	</delete>
	
	<select id="findAllByUserId" resultType="com.guideyou.repository.entity.Product">
		select * from product where user_id = #{userId}
	</select>
	
	<select id="findByProductId" resultType="com.guideyou.dto.ProductDto">
		select * from product a 
		left join product_photos b on a.id = b.product_id 
		where a.id = #{id} and b.thumbnail is not null
	</select>
		
	<select id="findAll" resultType="com.guideyou.repository.entity.Product">
		select * from product ORDER BY created_at DESC
	</select>
	
	
	<!-- 검색과 페이징 -->
	<select id="findProductsWithImages" resultType="com.guideyou.repository.entity.Product">
		SELECT p.*, pi.upload_file_name AS uploadFileName
	    FROM product p
	    LEFT JOIN product_photos pi ON p.id = pi.product_id
	    where 1 = 1
	    <if test="searchText != null and searchText != ''">
		    and title like CONCAT('%', #{searchText}, '%') or content like CONCAT('%', #{searchText} , '%')
	    </if>
	    <if test="cityCodeId != null and cityCodeId != ''">
	    	and city_code_id = #{cityCodeId} 	
	    </if>
	    GROUP BY p.id
	    ORDER BY p.created_at DESC
	    limit #{limit} offset #{offset}
	</select>
		
	
	<!-- 페이지 처리 -->
	<select id="findAllwithPasing" resultType="com.guideyou.dto.ProductDto">
		select p.*, ph.product_id, c.id from product p
		left join product_photos ph on p.id = ph.product_id
		left join city_code c on p.city_code_id = c.id
		where 1 = 1
	    <if test="searchText != null and searchText != ''">
		    and title like CONCAT('%', #{searchText}, '%') or content like CONCAT('%', #{searchText} , '%')
	    </if>
	    <if test="cityCodeId != null and cityCodeId != ''">
	    	and city_code_id = #{cityCodeId} 	
	    </if>
		group by p.id
        limit #{limit} offset #{offset}
	</select>
	
	<select id="getTotalCount" resultType="int">
		select count(*) from product
		where 1 = 1
	    <if test="searchText != null and searchText != ''">
		    and title like CONCAT('%', #{searchText}, '%') or content like CONCAT('%', #{searchText} , '%')
	    </if>
	    <if test="cityCodeId != null and cityCodeId != ''">
	    	and city_code_id = #{cityCodeId} 	
	    </if>
	</select>
	
	
	<!-- 인기 상품 목록 조회 - 판매 순 -->
	<select id="popularProduct" resultType="com.guideyou.dto.ProductDto">
		SELECT p.*, pi.upload_file_name AS uploadFileName
	    FROM product p
	    LEFT JOIN product_photos pi ON p.id = pi.product_id
	    GROUP BY p.id
	    ORDER BY p.sold_count DESC
	</select>
		
	
	<!-- 마이페이지 사용자가 작성한 상품 목록 조회 -->
		<!-- *************** 최장호 추가 02/26 ************************** -->
	<select id="getUploadProductsInfoByUserId" resultType="com.guideyou.dto.product.UploadProductsInfoDTO">
		SELECT 
		a.id AS product_id,
		b.city_name, 
		c.product_photo_path, 
		a.title,
		substring(a.content, 1, 10) AS short_content, 
		a.price AS product_price, 
		a.created_at AS upload_time 
		FROM product a 
		LEFT JOIN
		city_code b ON a.city_code_id = b.id 
		LEFT JOIN 
		product_photos c ON a.id = c.product_id and c.thumbnail is not null
		WHERE a.user_id = #{userId};
	</select>
	<!-- ************************************************************************************** -->
		
	
</mapper>